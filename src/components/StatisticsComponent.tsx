// –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç StatisticsClient
'use client';

import { useEffect, useState } from 'react';
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import dynamic from 'next/dynamic';
import { fetchExpenses } from '@/store/slices/expensesSlice';
import { fetchResources } from '@/store/slices/resourceSlice';
import { fetchHarvestData } from '@/store/slices/harvestSlice';
import styles from '../styles/statistics.module.scss';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
const LineChart = dynamic(() => import('@/components/charts/LineChart'), { ssr: false });
const PieChart = dynamic(() => import('@/components/charts/PieChart'), { ssr: false });
const BarChart = dynamic(() => import('@/components/charts/BarChart'), { ssr: false });
const ExpenseChart = dynamic(() => import('@/components/charts/ExpenseChart'), { ssr: false });

interface LineChartData {
  date: string;
  value: number;
}

interface PieChartData {
  name: string;
  value: number;
}

interface BarChartData {
  crop?: string;
  yield?: number;
  category?: string;
  value?: number;
}

export default function StatisticsClient() {
  const dispatch = useAppDispatch();
  const resources = useAppSelector((state) => state.resources.data);
  const crops = useAppSelector((state) => state.harvest.data);
  const expenses = useAppSelector((state) => state.expenses.data);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const [lineChartData, setLineChartData] = useState<LineChartData[]>([]);
  const [pieChartData, setPieChartData] = useState<PieChartData[]>([]);
  const [barChartData, setBarChartData] = useState<BarChartData[]>([]);
  const [cropYieldData, setCropYieldData] = useState<BarChartData[]>([]);
  const [yieldPerAreaData, setYieldPerAreaData] = useState<LineChartData[]>([]);
  const [expensesChartData, setExpensesChartData] = useState<BarChartData[]>([]);

  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∑–∞—Ç—Ä–∞—Ç–∞–º
  const [expensesByCategory, setExpensesByCategory] = useState<PieChartData[]>([]);
  const [expensesByField, setExpensesByField] = useState<BarChartData[]>([]);
  const [expensesByTransport, setExpensesByTransport] = useState<BarChartData[]>([]);

  const [averageYield, setAverageYield] = useState<number>(0);
  const [totalHarvest, setTotalHarvest] = useState<number>(0);
  const [totalArea, setTotalArea] = useState<number>(0);
  const [startDate, setStartDate] = useState<string>('');
  const [endDate, setEndDate] = useState<string>('');

  useEffect(() => {
    dispatch(fetchExpenses());
    dispatch(fetchResources());
    dispatch(fetchHarvestData());
  }, [dispatch]);
  console.log('Expenses:', expenses);
  useEffect(() => {
    let filteredCrops = crops;
    if (startDate && endDate) {
      filteredCrops = crops.filter(crop => {
        const cropDate = new Date(crop.createdAt);
        return cropDate >= new Date(startDate) && cropDate <= new Date(endDate);
      });
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∂–∞—è
    const cropProgress = filteredCrops.map((crop) => ({
      date: crop.createdAt ? new Date(crop.createdAt).toLocaleDateString() : '–ù–µ—Ç –¥–∞—Ç—ã',
      value: crop.yield,
    }));
    setLineChartData(cropProgress);

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
    const resourceDistribution = resources.reduce((acc, resource) => {
      acc[resource.equipment] = (acc[resource.equipment] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    const pieData = Object.entries(resourceDistribution).map(([key, value]) => ({
      name: key,
      value,
    }));
    setPieChartData(pieData);

    // –£—á—ë—Ç –∑–∞—Ç—Ä–∞—Ç
    const expenseData = expenses.map((expense) => ({
      category: expense.type,
      value: expense.amount,
    }));
    setExpensesChartData(expenseData);

    // –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
    const yieldByCrop = filteredCrops.reduce((acc: Record<string, number>, crop) => {
      acc[crop.crop] = (acc[crop.crop] || 0) + crop.yield;
      return acc;
    }, {});
    const formattedCropYield = Object.entries(yieldByCrop).map(([crop, yieldValue]) => ({
      crop,
      yield: yieldValue,
    }));
    setCropYieldData(formattedCropYield);

    // –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –Ω–∞ –≥–µ–∫—Ç–∞—Ä
    const yieldPerHectare = filteredCrops.map(crop => ({
      date: crop.createdAt ? new Date(crop.createdAt).toLocaleDateString() : '–ù–µ—Ç –¥–∞—Ç—ã',
      value: crop.area > 0 ? crop.yield / crop.area : 0,
    }));
    setYieldPerAreaData(yieldPerHectare);

    // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã –ø–æ —É—Ä–æ–∂–∞—é
    if (filteredCrops.length > 0) {
      const totalYield = filteredCrops.reduce((sum, crop) => sum + crop.yield, 0);
      const avgYield = totalYield / filteredCrops.length;
      const totalFieldArea = filteredCrops.reduce((sum, crop) => sum + crop.area, 0);
      setTotalHarvest(totalYield);
      setAverageYield(avgYield);
      setTotalArea(totalFieldArea);
    }

    // üî• –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—Ç—Ä–∞—Ç–∞–º üî•
    const categoryMap: Record<string, number> = {};
    const fieldMap: Record<string, number> = {};
    const transportMap: Record<string, number> = {};
    expenses.forEach(exp => {
      // –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      categoryMap[exp.type] = (categoryMap[exp.type] || 0) + exp.amount;
    
      // –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –ø–æ–ª—è–º
      if (exp.field) {
        const fieldName = `–ü–æ–ª–µ #${exp.field.id}`; // —Ç–∞–∫ –∫–∞–∫ crop –Ω–µ—Ç!
        fieldMap[fieldName] = (fieldMap[fieldName] || 0) + exp.amount;
      }
    
      // –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ
      if (exp.transport) {
        const transportName = exp.transport.equipment || `–¢–µ—Ö–Ω–∏–∫–∞ #${exp.transport.id}`;
        transportMap[transportName] = (transportMap[transportName] || 0) + exp.amount;
      }
    });

    const categoryData = Object.entries(categoryMap).map(([name, value]) => ({ name, value }));
    const fieldData = Object.entries(fieldMap).map(([name, value]) => ({ name, value }));
    const transportData = Object.entries(transportMap).map(([name, value]) => ({ name, value }));

    setExpensesByCategory(categoryData);
    setExpensesByField(fieldData);
    setExpensesByTransport(transportData);

  }, [resources, crops, expenses, startDate, endDate]);

  return (
    <div className={styles.container}>
      <h1>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>

      <div className={styles.filters}>
        <label>
          –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:
          <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        </label>
        <label>
          –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:
          <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
        </label>
      </div>

      <div className={styles.summary}>
        <p><strong>–û–±—â–∏–π —É—Ä–æ–∂–∞–π:</strong> {totalHarvest.toFixed(2)} —Ç.</p>
        <p><strong>–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å:</strong> {averageYield.toFixed(2)} —Ç./–≥–∞</p>
        <p><strong>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–ª–µ–π:</strong> {totalArea.toFixed(2)} –≥–∞</p>
      </div>

      <div className={styles.chartsGrid}>
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∂–∞—è */}
        <div className={styles.chartSection}>
          <h2>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∂–∞—è</h2>
          {lineChartData.length > 0 ? (
            <LineChart data={lineChartData} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∂–∞—è</p>
          )}
        </div>

        {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ */}
        <div className={styles.chartSection}>
          <h2>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏</h2>
          {pieChartData.length > 0 ? (
            <PieChart data={pieChartData} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏</p>
          )}
        </div>

        {/* –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º */}
        <div className={styles.chartSection}>
          <h2>–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º</h2>
          {cropYieldData.length > 0 ? (
            <BarChart data={cropYieldData} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º</p>
          )}
        </div>

        {/* –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –Ω–∞ –≥–µ–∫—Ç–∞—Ä */}
        <div className={styles.chartSection}>
          <h2>–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –Ω–∞ –≥–µ–∫—Ç–∞—Ä</h2>
          {yieldPerAreaData.length > 0 ? (
            <LineChart data={yieldPerAreaData} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –Ω–∞ –≥–µ–∫—Ç–∞—Ä</p>
          )}
        </div>

        {/* –£—á—ë—Ç –∑–∞—Ç—Ä–∞—Ç (—Å—Ç–∞—Ä—ã–π) */}
        <div className={styles.chartSection}>
          <h2>–£—á—ë—Ç –∑–∞—Ç—Ä–∞—Ç</h2>
          {expensesChartData.length > 0 ? (
            <ExpenseChart data={expensesChartData} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç</p>
          )}
        </div>

        {/* üî• –ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
        <div className={styles.chartSection}>
          <h2>–ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h2>
          {expensesByCategory.length > 0 ? (
            <PieChart data={expensesByCategory} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞—Ç—Ä–∞—Ç</p>
          )}
        </div>

        {/* üî• –ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –ø–æ–ª—è–º */}
        <div className={styles.chartSection}>
          <h2>–ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –ø–æ–ª—è–º</h2>
          {expensesByField.length > 0 ? (
            <BarChart data={expensesByField} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—è–º</p>
          )}
        </div>

        {/* üî• –ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ */}
        <div className={styles.chartSection}>
          <h2>–ó–∞—Ç—Ä–∞—Ç—ã –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ</h2>
          {expensesByTransport.length > 0 ? (
            <BarChart data={expensesByTransport} />
          ) : (
            <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ</p>
          )}
        </div>
      </div>
    </div>
  );
}



// 'use client';

// import { useEffect, useState } from 'react';
// import { useAppSelector, useAppDispatch } from '@/store/hooks';
// import dynamic from 'next/dynamic'; // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
// import { fetchResources } from '@/store/slices/resourceSlice';
// import { fetchHarvestData } from '@/store/slices/harvestSlice';
// import { fetchExpenses } from '@/store/slices/expensesSlice';
// import styles from '../styles/statistics.module.scss';

// // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
// const LineChart = dynamic(() => import('@/components/charts/LineChart'), { ssr: false });
// const PieChart = dynamic(() => import('@/components/charts/PieChart'), { ssr: false });
// const BarChart = dynamic(() => import('@/components/charts/BarChart'), { ssr: false });
// const ExpenseChart = dynamic(() => import('@/components/charts/ExpenseChart'), { ssr: false });

// interface LineChartData {
//   date: string;
//   value: number;
// }

// interface PieChartData {
//   name: string;
//   value: number;
// }

// interface BarChartData {
//   crop?: string;
//   yield?: number;
//   category?: string;
//   value?: number; 
// }

// export default function StatisticsClient() {
//   const dispatch = useAppDispatch();
//   const resources = useAppSelector((state) => state.resources.data);
//   const crops = useAppSelector((state) => state.harvest.data); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è harvestSlice
//   const expenses = useAppSelector((state) => state.expenses.data);
//   console.log(expenses)

//   const [lineChartData, setLineChartData] = useState<LineChartData[]>([]);
//   const [yieldPerAreaData, setYieldPerAreaData] = useState<LineChartData[]>([]);
//   const [pieChartData, setPieChartData] = useState<PieChartData[]>([]);
//   const [barChartData, setBarChartData] = useState<BarChartData[]>([]);
//   const [expensesChartData, setExpensesChartData] = useState<BarChartData[]>([])
//   const [averageYield, setAverageYield] = useState<number>(0);
//   const [totalHarvest, setTotalHarvest] = useState<number>(0);
//   const [totalArea, setTotalArea] = useState<number>(0);

//   useEffect(() => {
//     dispatch(fetchResources());
//     dispatch(fetchHarvestData());
//     dispatch(fetchExpenses());
//   }, [dispatch]);


//   useEffect(() => {
//     // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∂–∞—è –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º)
//     const cropProgress = crops.map((crop) => ({
//       date: crop.createdAt ? new Date(crop.createdAt).toLocaleDateString() : '–ù–µ—Ç –¥–∞—Ç—ã', // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞—Ç—ã
//       value: crop.yield,
//     }));

//     setLineChartData(cropProgress);

//     const yieldByCrop = crops.reduce((acc: Record<string, number>, crop) => {
//       acc[crop.crop] = (acc[crop.crop] || 0) + crop.yield;
//       return acc;
//     }, {});
  
//     const formattedData = Object.entries(yieldByCrop).map(([crop, yieldValue]) => ({
//       crop,
//       yield: yieldValue,
//     }));
  
//     setBarChartData(formattedData);

//     const expenseData = expenses.map((expense) => ({
//       category: expense.category,
//       value: expense.amount,
//     }));
//     setExpensesChartData(expenseData);
    
//     // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏)
//     const resourceDistribution = resources.reduce((acc, resource) => {
//       acc[resource.equipment] = (acc[resource.equipment] || 0) + 1;
//       return acc;
//     }, {} as Record<string, number>);
    
//     const pieData = Object.entries(resourceDistribution).map(([key, value]) => ({
//       name: key,
//       value,
//     }));
    
//     setPieChartData(pieData);
    
//     const data = crops.map((crop) => ({
//       date: crop.createdAt ? new Date(crop.createdAt).toLocaleDateString() : '–ù–µ—Ç –¥–∞—Ç—ã',
//       value: crop.area > 0 ? crop.yield / crop.area : 0,
//     }));
//     setYieldPerAreaData(data);
    
//     // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –∏ —Å—Ä–µ–¥–Ω–µ–π —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –∏ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–µ–π
//     if (crops.length > 0) {
//       const totalYield = crops.reduce((sum, crop) => sum + crop.yield, 0);
//       const avgYield = totalYield / crops.length;
//       const totalFieldArea = crops.reduce((sum, crop) => sum + crop.area, 0);
//       setTotalHarvest(totalYield);
//       setAverageYield(avgYield);
//       setTotalArea(totalFieldArea);
//     }
//   }, [resources, crops, expenses]);
//   console.log(expensesChartData)
  
//   return (
//     <div className={styles.container}>
//       <h1>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
//       <div className={styles.summary}>
//         <p><strong>–û–±—â–∏–π —É—Ä–æ–∂–∞–π:</strong> {totalHarvest.toFixed(2)} —Ç.</p>
//         <p><strong>–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å:</strong> {averageYield.toFixed(2)} —Ç./–≥–∞</p>
//         <p><strong>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ–ª–µ–π:</strong> {totalArea.toFixed(2)} –≥–∞</p>
//       </div>
//       <div className={styles.chartsGrid}>
//         <div className={styles.chartSection}>
//           <h2>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∂–∞—è</h2>
//           {lineChartData.length > 0 ? (
//             <LineChart data={lineChartData} />
//           ) : (
//             <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∂–∞—è</p>
//           )}
//         </div>

//         <div className={styles.chartSection}>
//           <h2>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏</h2>
//           {pieChartData.length > 0 ? (
//             <PieChart data={pieChartData} />
//           ) : (
//             <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏</p>
//           )}
//         </div>

//         <div className={styles.chartSection}>
//           <h2>–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º</h2>
//           {barChartData.length > 0 ? (
//             <BarChart data={barChartData} />
//           ) : (
//             <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º</p>
//           )}
//         </div>
//         <div className={styles.chartSection}>
//           <h2>–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –Ω–∞ –≥–µ–∫—Ç–∞—Ä</h2>
//           {yieldPerAreaData.length > 0 ? (
//             <LineChart data={yieldPerAreaData} />
//           ) : (
//             <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –Ω–∞ –≥–µ–∫—Ç–∞—Ä</p>
//           )}
//         </div>
//         <div className={styles.chartSection}>
//           <h2>–£—á—ë—Ç –∑–∞—Ç—Ä–∞—Ç</h2>
//           {expensesChartData.length > 0 ? (
//             <ExpenseChart data={expensesChartData} />
//           ) : (
//             <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç</p>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// }